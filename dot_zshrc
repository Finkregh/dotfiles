export LANG=en_US.UTF-8

# gather timing infos, then run zprof
#zmodload zsh/zprof

# enable caching
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zsh

# complete proc-ids with menu
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always

#export HISTIGNORE="&:[bf]g:exit"
#export HISTCONTROL=ignoredups
# read this number of lines into history buffer on startup
# carefull with this, it will increase bash memory footprint and load time
export HISTSIZE=90000
# HISTFILESIZE is set *after* bash reads the history file
# (which is done after reading any configs like .bashrc)
# if it is unset at this point it is set to the same value as HISTSIZE
# therefore we must set it to NIL, in which case it isn't "unset",
# but doesn't have a value either, go figure
#export HISTFILESIZE=""
export SAVEHIST=$HISTSIZE
## Command history configuration
if [ -z "$HISTFILE" ]; then
    HISTFILE=$HOME/.zsh_history
fi

setopt append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups # ignore duplication command history list
setopt hist_ignore_space
setopt hist_verify
setopt inc_append_history
#setopt share_history # share command history data
setopt interactivecomments # enable bash-style comments # like this
# If a command is issued that can’t be executed as a normal command, and the command is the name of a directory, perform the cd command to that directory
setopt auto_cd

typeset -U path # only have paths once in the array

# python crashes otherwise...
# needs `ln -s /usr/local/Cellar/openssl/1.0.2t/lib/libssl.1.0.0.dylib /usr/local/lib/libssl.dylib ; ln -s /usr/local/Cellar/openssl/1.0.2t/lib/libcrypto.1.0.0.dylib /usr/local/lib/libcrypto.dylib`

#autoload -Uz compinit
#compinit
builtin source ~/.zsh_aliases
builtin source ~/.zshenv
# remove fugly macos old zsh version from fpath
export FPATH=$(echo "$FPATH" | sed -e 's|:/usr/share/zsh/5.8.1/functions||')
typeset -U fpath
#print -l $fpath

builtin source ~/.zsh_functions
. ~/.zsh_keybindings
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi
# GITHUB_TOKEN etc
#. ~/.env-secrets

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe.sh ] && eval "$(/usr/bin/lesspipe.sh)"

#export GPG_TTY=$(tty)
#gpg-connect-agent updatestartuptty /bye >/dev/null
if command -v keychain &>/dev/null; then
    sleep 0.$((($RANDOM % 9)))
    eval $(keychain --quiet --eval --agents ssh --inherit any --quick)
    keychain --quick --inherit any --agents "ssh" ~/.ssh/id_rsa ~/.ssh/id_ed25519
    #keychain --quick --inherit any --agents "gpg" 0x243278FC323BBE52

    [ -z "$HOSTNAME" ] && HOSTNAME=$(uname -n)
    [ -f $HOME/.keychain/$HOSTNAME-sh ] &&
        . $HOME/.keychain/$HOSTNAME-sh
    #[ -f $HOME/.keychain/$HOSTNAME-sh-gpg ] && \
    #    . $HOME/.keychain/$HOSTNAME-sh-gpg
fi

# Make sure that the terminal is in application mode when zle is active, since
# only then values from $terminfo are valid
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

### Zinit
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust
### End of Zinit

zinit light-mode for \
    trigger-load'!zshz' blockf \
        agkozak/zsh-z \
    "zsh-users/zsh-autosuggestions" \
    "z-shell/F-Sy-H" \
    "chrissicool/zsh-256color" \
    @asdf-vm/asdf
#    redxtech/zsh-asdf-direnv
#    "mattberther/zsh-pyenv" \

# #zplug "zsh-users/zsh-completions"

zinit lucid wait light-mode for \
	OMZP::colored-man-pages/colored-man-pages.plugin.zsh \
	OMZP::colorize/colorize.plugin.zsh \
    OMZP::git/git.plugin.zsh \
    OMZP::pyenv \
    OMZP::virtualenv
    #OMZP::autojump/autojump.plugin.zsh # clashes with jo... :|

#    OMZP::pyenv/pyenv.plugin.zsh \
	#OMZP::asdf/asdf.plugin.zsh

# #zplug "chmouel/kss", use:"_kss", as:command, use:"kss"

zinit ice as"program" cp"bin/git-fuzzy -> git-fuzzy" pick"git-fuzzy"
zinit light bigH/git-fuzzy

zinit ice as"program" cp"ssh-* -> ssh-tools"
zinit light vaporup/ssh-tools
zinit ice as"program" pick"$ZPFX/bin/git-*" make"PREFIX=$ZPFX" nocompile
zinit light tj/git-extras
source ~/.local/share/zinit/plugins/tj---git-extras/etc/git-extras-completion.zsh
zinit ice as"program" cp"httpstat.sh -> httpstat" pick"httpstat"
zinit light b4b4r07/httpstat

#zinit lucid as'command' pick'bin/pyenv' atinit'export PYENV_ROOT="$PWD"' \
#    atclone'PYENV_ROOT="$PWD" ./libexec/pyenv init - > zpyenv.zsh' \
#    atpull"%atclone" src"zpyenv.zsh" nocompile'!' for \
#        pyenv/pyenv

#zi ice lucid wait \
# as'command' pick'bin/pyenv' \
# atload'eval "$(pyenv init - --no-rehash zsh)"' \
# src'completions/pyenv.zsh' nocompile'!'
#zi light pyenv/pyenv

#zi ice lucid wait'[[ -n ${ZLAST_COMMANDS[(r)pyenv]} ]]' \
# as'command' pick"bin/*" \
# atload'eval "$(pyenv virtualenv-init - zsh)"'
#zi light pyenv/pyenv-virtualenv

export PYENV_ROOT="$HOME/.pyenv"
# Load pyenv automatically
eval "$(pyenv init --path)"
# Load pyenv-virtualenv automatically
eval "$(pyenv virtualenv-init -)"

zi for \
    from'gh-r'  \
    sbin'fzf'   \
  junegunn/fzf
zi for \
    https://github.com/junegunn/fzf/raw/master/shell/{'completion','key-bindings'}.zsh

# sharkdp/fd
zi for \
    from'gh-r'  \
    sbin'**/fd -> fd' \
  @sharkdp/fd

# sharkdp/bat
zi for \
    from'gh-r' \
    sbin'**/bat -> bat' \
  @sharkdp/bat

# ogham/exa, replacement for ls
zi for \
    atclone'cp -vf completions/exa.zsh _exa'  \
    from'gh-r' \
    sbin'**/exa -> exa' \
  ogham/exa

zi for \
    from'gh-r'  \
    sbin'g*x -> grex'  \
  pemistahl/grex

zi for \
    as"program" \
    atclone'./direnv hook zsh > zhook.zsh' \
    from"gh-r" \
    light-mode \
    mv"direnv* -> direnv" \
    src'zhook.zsh' \
  direnv/direnv

# forgit, git interactive stuff
zinit ice wait lucid
zinit load 'wfxr/forgit'

zinit ice wait'[[ -n ${ZLAST_COMMANDS[(r)cras*]} ]]'
zinit light zdharma-continuum/zui
zinit ice wait'[[ -n ${ZLAST_COMMANDS[(r)cras*]} ]]'
zinit light zdharma-continuum/zinit-crasis

# keep at bottom
zi for \
    atload"zicompinit; zicdreplay" \
    blockf \
    lucid \
    wait \
  zsh-users/zsh-completions

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.config/zsh/p10k.zsh ]] || source ~/.config/zsh/p10k.zsh
zinit ice lucid depth=1; zinit load romkatv/powerlevel10k

_zinit_update() {
    zinit self-update
    zinit update --parallel 40
}

if [ ! -e /tmp/zinit-update-timer ] ; then
    touch /tmp/zinit-update-timer
    _zinit_update
fi
if test $(find /tmp/zinit-update-timer -mtime +1); then
    _zinit_update
    touch /tmp/zinit-update-timer
fi

# ruby garbage
type rbenv > /dev/null && eval "$(rbenv init -)"

#if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi


# dont suspend background jobs if they produce output
stty -tostop

if [[ $(uname) == "Darwin" ]]; then
    # FIXME
    #if which chezmoi > /dev/null; then chezmoi completion zsh > /opt/homebrew/share/zsh/site-functions/_chezmoi; fi
    #if which gopass > /dev/null; then gopass completion zsh > /opt/homebrew/share/zsh/site-functions/_gopass; fi
    
    # crude daily homebrew update
    if [ ! -e /tmp/brew-update-timer ] ; then
        touch /tmp/brew-update-timer
        brew update
        brew upgrade
        brew upgrade --cask
        brew cleanup --prune 30
    fi
    if test $(find /tmp/brew-update-timer -mtime +1); then
        brew update
        brew upgrade
        brew upgrade --cask
        brew cleanup --prune 30
        touch /tmp/brew-update-timer
    fi
    
    # get system CAs for e.g. python
    security export -t certs -f pemseq -k /System/Library/Keychains/SystemRootCertificates.keychain -o /tmp/bundleCA.pem
    security export -t certs -f pemseq -k /Library/Keychains/System.keychain -o /tmp/selfSignedCAbundle.pem
    cat /tmp/selfSignedCAbundle.pem >> /tmp/bundleCA.pem
    export REQUESTS_CA_BUNDLE=/tmp/bundleCA.pem NODE_EXTRA_CA_CERTS=/tmp/bundleCA.pem SSL_CERT_FILE=/tmp/bundleCA.pem
fi

# load completions
#type compinit $> /dev/null || autoload -Uz compinit
#test -n "${_comp_dumpfile}" || compinit

#if [ -e /Users/c5276249/.nix-profile/etc/profile.d/nix.sh ]; then . /Users/c5276249/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
